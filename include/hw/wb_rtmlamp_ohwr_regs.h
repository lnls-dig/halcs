#ifndef __WB_RTMLAMP_OHWR_CC_REGS_H__
#define __WB_RTMLAMP_OHWR_CC_REGS_H__

#include "__wb_rtmlamp_ohwr_regs.h"

#ifdef __KERNEL__
#include <linux/types.h>
#else
#include <inttypes.h>
#endif

#if defined( __GNUC__)
#define PACKED __attribute__ ((packed))
#else
#error "Unsupported compiler?"
#endif

#ifndef __WBGEN2_MACROS_DEFINED__
#define __WBGEN2_MACROS_DEFINED__
#define WBGEN2_GEN_MASK(offset, size) (((1<<(size))-1) << (offset))
#define WBGEN2_GEN_WRITE(value, offset, size) (((value) & ((1<<(size))-1)) << (offset))
#define WBGEN2_GEN_READ(reg, offset, size) (((reg) >> (offset)) & ((1<<(size))-1))
#define WBGEN2_SIGN_EXTEND(value, bits) (((value) & (1<<bits) ? ~((1<<(bits))-1): 0 ) | (value))
#endif

/* General RTM status register */
#define WB_RTMLAMP_OHWR_REG_STA                      WB_RTMLAMP_OHWR_REGS_STA
#define WB_RTMLAMP_OHWR_STA_RESERVED_MASK            WB_RTMLAMP_OHWR_REGS_STA_RESERVED_MASK
#define WB_RTMLAMP_OHWR_STA_RESERVED_SHIFT           WB_RTMLAMP_OHWR_REGS_STA_RESERVED_SHIFT
#define WB_RTMLAMP_OHWR_STA_RESERVED_R(val)          ((val & WB_RTMLAMP_OHWR_STA_RESERVED_MASK) >> WB_RTMLAMP_OHWR_STA_RESERVED_SHIFT)
#define WB_RTMLAMP_OHWR_STA_RESERVED_W(val)          ((val & WB_RTMLAMP_OHWR_STA_RESERVED_MASK) << WB_RTMLAMP_OHWR_STA_RESERVED_SHIFT)

/* General RTM control register */
#define WB_RTMLAMP_OHWR_REG_CTL                      WB_RTMLAMP_OHWR_REGS_CTL

/* General RTM offset */
#define WB_RTMLAMP_OHWR_REG_CH                       WB_RTMLAMP_OHWR_REGS_CH
#define WB_RTMLAMP_OHWR_CH_SIZE                      WB_RTMLAMP_OHWR_REGS_CH_SIZE

/* Definitions for Channel status register */
#define WB_RTMLAMP_OHWR_REG_CH_STA                   WB_RTMLAMP_OHWR_REGS_CH_STA
#define WB_RTMLAMP_OHWR_CH_STA_AMP_IFLAG_L           WB_RTMLAMP_OHWR_REGS_CH_STA_AMP_IFLAG_L
#define WB_RTMLAMP_OHWR_CH_STA_AMP_TFLAG_L           WB_RTMLAMP_OHWR_REGS_CH_STA_AMP_TFLAG_L
#define WB_RTMLAMP_OHWR_CH_STA_AMP_IFLAG_R           WB_RTMLAMP_OHWR_REGS_CH_STA_AMP_IFLAG_R
#define WB_RTMLAMP_OHWR_CH_STA_AMP_TFLAG_R           WB_RTMLAMP_OHWR_REGS_CH_STA_AMP_TFLAG_R

/* Definitions for Channel 0 control register */
#define WB_RTMLAMP_OHWR_REG_CH_CTL                   WB_RTMLAMP_OHWR_REGS_CH_CTL
#define WB_RTMLAMP_OHWR_CH_CTL_AMP_EN                WB_RTMLAMP_OHWR_REGS_CH_CTL_AMP_EN
#define WB_RTMLAMP_OHWR_CH_CTL_MODE_MASK             WB_RTMLAMP_OHWR_REGS_CH_CTL_MODE_MASK
#define WB_RTMLAMP_OHWR_CH_CTL_MODE_SHIFT            WB_RTMLAMP_OHWR_REGS_CH_CTL_MODE_SHIFT
#define WB_RTMLAMP_OHWR_CH_CTL_MODE_R(val)           ((val & WB_RTMLAMP_OHWR_CH_CTL_MODE_MASK) >> WB_RTMLAMP_OHWR_CH_CTL_MODE_SHIFT)
#define WB_RTMLAMP_OHWR_CH_CTL_MODE_W(val)           ((val & WB_RTMLAMP_OHWR_CH_CTL_MODE_MASK) << WB_RTMLAMP_OHWR_CH_CTL_MODE_SHIFT)

/* Definitions for PI Kp parameter */
#define WB_RTMLAMP_OHWR_REG_CH_PI_KP                 WB_RTMLAMP_OHWR_REGS_CH_PI_KP
#define WB_RTMLAMP_OHWR_CH_PI_KP_DATA_MASK           WB_RTMLAMP_OHWR_REGS_CH_PI_KP_DATA_MASK
#define WB_RTMLAMP_OHWR_CH_PI_KP_DATA_SHIFT          WB_RTMLAMP_OHWR_REGS_CH_PI_KP_DATA_SHIFT
#define WB_RTMLAMP_OHWR_CH_PI_KP_DATA_R(val)         ((val & WB_RTMLAMP_OHWR_CH_PI_KP_DATA_MASK) >> WB_RTMLAMP_OHWR_CH_PI_KP_DATA_SHIFT)
#define WB_RTMLAMP_OHWR_CH_PI_KP_DATA_W(val)         ((val & WB_RTMLAMP_OHWR_CH_PI_KP_DATA_MASK) << WB_RTMLAMP_OHWR_CH_PI_KP_DATA_SHIFT)

/* Definitions for PI Ti parameter */
#define WB_RTMLAMP_OHWR_REG_CH_PI_TI                 WB_RTMLAMP_OHWR_REGS_CH_PI_TI
#define WB_RTMLAMP_OHWR_CH_PI_TI_DATA_MASK           WB_RTMLAMP_OHWR_REGS_CH_PI_TI_DATA_MASK
#define WB_RTMLAMP_OHWR_CH_PI_TI_DATA_SHIFT          WB_RTMLAMP_OHWR_REGS_CH_PI_TI_DATA_SHIFT
#define WB_RTMLAMP_OHWR_CH_PI_TI_DATA_R(val)         ((val & WB_RTMLAMP_OHWR_CH_PI_TI_DATA_MASK) >> WB_RTMLAMP_OHWR_CH_PI_TI_DATA_SHIFT)
#define WB_RTMLAMP_OHWR_CH_PI_TI_DATA_W(val)         ((val & WB_RTMLAMP_OHWR_CH_PI_TI_DATA_MASK) << WB_RTMLAMP_OHWR_CH_PI_TI_DATA_SHIFT)

/* Definitions for PI SP parameter */
#define WB_RTMLAMP_OHWR_REG_CH_PI_SP                 WB_RTMLAMP_OHWR_REGS_CH_PI_SP
#define WB_RTMLAMP_OHWR_CH_PI_SP_DATA_MASK           WB_RTMLAMP_OHWR_REGS_CH_PI_SP_DATA_MASK
#define WB_RTMLAMP_OHWR_CH_PI_SP_DATA_SHIFT          WB_RTMLAMP_OHWR_REGS_CH_PI_SP_DATA_SHIFT
#define WB_RTMLAMP_OHWR_CH_PI_SP_DATA_R(val)         ((val & WB_RTMLAMP_OHWR_CH_PI_SP_DATA_MASK) >> WB_RTMLAMP_OHWR_CH_PI_SP_DATA_SHIFT)
#define WB_RTMLAMP_OHWR_CH_PI_SP_DATA_W(val)         ((val & WB_RTMLAMP_OHWR_CH_PI_SP_DATA_MASK) << WB_RTMLAMP_OHWR_CH_PI_SP_DATA_SHIFT)

/* Definitions for DAC Channel control register */
#define WB_RTMLAMP_OHWR_REG_CH_DAC                   WB_RTMLAMP_OHWR_REGS_CH_DAC
#define WB_RTMLAMP_OHWR_CH_DAC_DATA_MASK             WB_RTMLAMP_OHWR_REGS_CH_DAC_DATA_MASK
#define WB_RTMLAMP_OHWR_CH_DAC_DATA_SHIFT            WB_RTMLAMP_OHWR_REGS_CH_DAC_DATA_SHIFT
#define WB_RTMLAMP_OHWR_CH_DAC_DATA_R(val)           ((val & WB_RTMLAMP_OHWR_CH_DAC_DATA_MASK) >> WB_RTMLAMP_OHWR_CH_DAC_DATA_SHIFT)
#define WB_RTMLAMP_OHWR_CH_DAC_DATA_W(val)           ((val & WB_RTMLAMP_OHWR_CH_DAC_DATA_MASK) << WB_RTMLAMP_OHWR_CH_DAC_DATA_SHIFT)

/* Definitions for square wave limits */
#define WB_RTMLAMP_OHWR_REG_CH_LIM                   WB_RTMLAMP_OHWR_REGS_CH_LIM
#define WB_RTMLAMP_OHWR_CH_LIM_A_MASK                WB_RTMLAMP_OHWR_REGS_CH_LIM_A_MASK
#define WB_RTMLAMP_OHWR_CH_LIM_A_SHIFT               WB_RTMLAMP_OHWR_REGS_CH_LIM_A_SHIFT
#define WB_RTMLAMP_OHWR_CH_LIM_A_R(val)              ((val & WB_RTMLAMP_OHWR_CH_LIM_A_MASK) >> WB_RTMLAMP_OHWR_CH_LIM_A_SHIFT)
#define WB_RTMLAMP_OHWR_CH_LIM_A_W(val)              ((val & WB_RTMLAMP_OHWR_CH_LIM_A_MASK) << WB_RTMLAMP_OHWR_CH_LIM_A_SHIFT)
#define WB_RTMLAMP_OHWR_CH_LIM_B_MASK                WB_RTMLAMP_OHWR_REGS_CH_LIM_A_MASK
#define WB_RTMLAMP_OHWR_CH_LIM_B_SHIFT               WB_RTMLAMP_OHWR_REGS_CH_LIM_A_SHIFT
#define WB_RTMLAMP_OHWR_CH_LIM_B_R(val)              ((val & WB_RTMLAMP_OHWR_CH_LIM_B_MASK) >> WB_RTMLAMP_OHWR_CH_LIM_B_SHIFT)
#define WB_RTMLAMP_OHWR_CH_LIM_B_W(val)              ((val & WB_RTMLAMP_OHWR_CH_LIM_B_MASK) << WB_RTMLAMP_OHWR_CH_LIM_B_SHIFT)

/* Definitions for test mode period (in clock ticks) */
#define WB_RTMLAMP_OHWR_REG_CH_CNT                   WB_RTMLAMP_OHWR_REGS_CH_CNT
#define WB_RTMLAMP_OHWR_CH_CNT_DATA_MASK             WB_RTMLAMP_OHWR_REGS_CH_CNT_DATA_MASK
#define WB_RTMLAMP_OHWR_CH_CNT_DATA_SHIFT            WB_RTMLAMP_OHWR_REGS_CH_CNT_DATA_SHIFT
#define WB_RTMLAMP_OHWR_CH_CNT_DATA_R(val)           ((val & WB_RTMLAMP_OHWR_CH_CNT_DATA_MASK) >> WB_RTMLAMP_OHWR_CH_CNT_DATA_SHIFT)
#define WB_RTMLAMP_OHWR_CH_CNT_DATA_W(val)           ((val & WB_RTMLAMP_OHWR_CH_CNT_DATA_MASK) << WB_RTMLAMP_OHWR_CH_CNT_DATA_SHIFT)

/* Definitions for ADC and DAC instantaneous value (2's complement) */
#define WB_RTMLAMP_OHWR_REG_CH_ADC_DAC_EFF           WB_RTMLAMP_OHWR_REGS_CH_ADC_DAC_EFF
#define WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_ADC_MASK      WB_RTMLAMP_OHWR_REGS_CH_ADC_DAC_EFF_ADC_MASK
#define WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_ADC_SHIFT     WB_RTMLAMP_OHWR_REGS_CH_ADC_DAC_EFF_ADC_SHIFT
#define WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_ADC_R(val)    ((val & WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_ADC_MASK) >> WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_ADC_SHIFT)
#define WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_ADC_W(val)    ((val & WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_ADC_MASK) << WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_ADC_SHIFT)
#define WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_DAC_MASK      WB_RTMLAMP_OHWR_REGS_CH_ADC_DAC_EFF_ADC_MASK
#define WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_DAC_SHIFT     WB_RTMLAMP_OHWR_REGS_CH_ADC_DAC_EFF_ADC_SHIFT
#define WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_DAC_R(val)    ((val & WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_DAC_MASK) >> WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_DAC_SHIFT)
#define WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_DAC_W(val)    ((val & WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_DAC_MASK) << WB_RTMLAMP_OHWR_CH_ADC_DAC_EFF_DAC_SHIFT)

/* Definitions for setpoint instantaneous value (2's complement) */
#define WB_RTMLAMP_OHWR_REG_CH_SP_EFF                WB_RTMLAMP_OHWR_REGS_CH_SP_EFF
#define WB_RTMLAMP_OHWR_CH_SP_EFF_SP_MASK            WB_RTMLAMP_OHWR_REGS_CH_SP_EFF_SP_MASK
#define WB_RTMLAMP_OHWR_CH_SP_EFF_SP_SHIFT           WB_RTMLAMP_OHWR_REGS_CH_SP_EFF_SP_SHIFT
#define WB_RTMLAMP_OHWR_CH_SP_EFF_SP_R(val)          ((val & WB_RTMLAMP_OHWR_CH_SP_EFF_SP_MASK) >> WB_RTMLAMP_OHWR_CH_SP_EFF_SP_SHIFT)
#define WB_RTMLAMP_OHWR_CH_SP_EFF_SP_W(val)          ((val & WB_RTMLAMP_OHWR_CH_SP_EFF_SP_MASK) << WB_RTMLAMP_OHWR_CH_SP_EFF_SP_SHIFT)

#endif /* __WB_RTMLAMP_OHWR_CC_REGS_H__ */
